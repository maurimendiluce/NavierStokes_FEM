include "ffmatlib.idp"

//Parametros generales
real nu = 1;
real tol = 1e-9;
real x0 = -1;
real x1 = 1;
real y0 = -1;
real y1 = 1;

int n1 = 128;
int n2 = 2*n1;


//Problema Malla 1//

// Mesh
real h1=1./n1;
mesh Th1 = square(n1, n1, [x0+(x1-x0)*x, y0+(y1-y0)*y]);


//Dato Dirichlet (interpolador de lagrange de g=1)
func real gh1(real x){
    if(-1<=x && x<-1+h1){
        return (x+1)/h1;
    }
    if(-1+h1<=x && x<=1-h1){
        return 1;
    }
    if(1-h1<x && x<=1){
        return (1-x)/h1;
    }
}


//Fespace
fespace Vh1(Th1,P2);
Vh1 u1o, u2o, v1, v2, u1, u2, du1, du2;


fespace Qh1(Th1, P1);
Qh1 p, q, dp, psi,phi;
Qh1 g1=gh1(x);

//Macro
macro a(u1,u2,v1,v2) (dx(u1)*dx(v1) + dy(u1)*dy(v1) + dx(u2)*dx(v2) + dy(u2)*dy(v2)) //
macro Gradient(u) [dx(u),dy(u)] //
macro div(u1,u2) (dx(u1) + dy(u2)) //
macro UgradV(u1,u2,v1,v2) [ [u1,u2]'*[dx(v1),dy(v1)] , [u1,u2]'*[dx(v2),dy(v2)] ]//


macro NS1() {
 int k;
 real err1=0;
 Stokes1;
/* Newton Loop  */
 for(k=0; k< 15; k++) {
   LinNS1;
   du1[] = u1[] - u1o[];
   du2[] = u2[] - u2o[];
   err1 = sqrt(int2d(Th1)(Gradient(du1)'*Gradient(du1)+Gradient(du2)'*Gradient(du2))) /
     sqrt(int2d(Th1)(Gradient(u1o)'*Gradient(u1o) + Gradient(u2o)'*Gradient(u2o)));
   u1o[] = u1[];
   u2o[] = u2[];
   cout << "error = " << err1 << " / " << "tol = " << tol << endl;
   cout.flush;
   if(err1 < tol) break;
 }
 /* Newton loop has not converged */
 if(err1 > tol) {
   cout << "NS Warning : non convergence : err = " << err1 << " / eps = " << tol << endl;
 }

} //

//Problemas 1 
problem Stokes1 ([u1o, u2o, p],[v1, v2, q])
    = int2d(Th1)(
        nu*a(u1o,u2o,v1,v2)
        - div(v1,v2)*p
        + q*(div(u1o,u2o)))//-int2d(Th,qforder=2)(p*q)
        //+ int2d(Th)(p*q) 
     +on(1,2,4, u1o=0, u2o=0)
     +on(3, u1o=g1, u2o=0);

problem LinNS1([u1,u2,dp],[v1,v2,q]) = 
     int2d(Th1)(nu*a(u1,u2,v1,v2)
	       + UgradV(u1,u2, u1o, u2o)'*[v1,v2]
	       + UgradV(u1o,u2o,u1,u2)'*[v1,v2]
	       + div(u1,u2)*q - div(v1,v2)*dp)
        -int2d(Th1)(UgradV(u1o,u2o, u1o, u2o)'*[v1,v2])//-int2d(Th,qforder=2)(dp*q)
        //+ int2d(Th)(dp*q)
     +on(1,2,4, u1=0, u2=0)
     +on(3, u1=g1, u2=0);

NS1;


//Problema Malla 2//

// Mesh
real h2=1./n2;
mesh Th2 = square(n2, n2, [x0+(x1-x0)*x, y0+(y1-y0)*y]);


//Dato Dirichlet (interpolador de lagrange de g=1)
func real gh2(real x){
    if(-1<=x && x<-1+h2){
        return (x+1)/h2;
    }
    if(-1+h2<=x && x<=1-h2){
        return 1;
    }
    if(1-h2<x && x<=1){
        return (1-x)/h2;
    }
}


//Fespace
fespace Vh2(Th2,P2);
Vh2 uu1o, uu2o, vv1, vv2, uu1, uu2, duu1, duu2;


fespace Qh2(Th2, P1);
Qh2 pp, qq, dpp;
Qh2 g2=gh2(x);

//Macro
//macro a(u1,u2,v1,v2) (dx(u1)*dx(v1) + dy(u1)*dy(v1) + dx(u2)*dx(v2) + dy(u2)*dy(v2)) //
//macro Gradient(u) [dx(u),dy(u)] //
//macro div(u1,u2) (dx(u1) + dy(u2)) //
//macro UgradV(u1,u2,v1,v2) [ [u1,u2]'*[dx(v1),dy(v1)] , [u1,u2]'*[dx(v2),dy(v2)] ]//


macro NS2() {
 int k;
 real err2=0;
 Stokes2;
/* Newton Loop  */
 for(k=0; k< 15; k++) {
   LinNS2;
   duu1[] = uu1[] - uu1o[];
   duu2[] = uu2[] - uu2o[];
   err2 = sqrt(int2d(Th2)(Gradient(duu1)'*Gradient(duu1)+Gradient(duu2)'*Gradient(duu2))) /
     sqrt(int2d(Th2)(Gradient(uu1o)'*Gradient(uu1o) + Gradient(uu2o)'*Gradient(uu2o)));
   uu1o[] = uu1[];
   uu2o[] = uu2[];
   cout << "error = " << err2 << " / " << "tol = " << tol << endl;
   cout.flush;
   if(err2 < tol) break;
 }
 /* Newton loop has not converged */
 if(err2 > tol) {
   cout << "NS Warning : non convergence : err = " << err2 << " / eps = " << tol << endl;
 }

} //

//Problemas 2 
problem Stokes2 ([uu1o, uu2o, pp],[vv1, vv2, qq])
    = int2d(Th2)(
        nu*a(uu1o,uu2o,vv1,vv2)
        - div(vv1,vv2)*pp
        + qq*(div(uu1o,uu2o)))//-int2d(Th,qforder=2)(p*q)
        //+ int2d(Th)(p*q) 
     +on(1,2,4, uu1o=0, uu2o=0)
     +on(3, uu1o=g2, uu2o=0);

problem LinNS2([uu1,uu2,dpp],[vv1,vv2,qq]) = 
     int2d(Th2)(nu*a(uu1,uu2,vv1,vv2)
	       + UgradV(uu1,uu2, uu1o, uu2o)'*[vv1,vv2]
	       + UgradV(uu1o,uu2o,uu1,uu2)'*[vv1,vv2]
	       + div(uu1,uu2)*qq - div(vv1,vv2)*dpp)
        -int2d(Th2)(UgradV(uu1o,uu2o, uu1o, uu2o)'*[vv1,vv2])//-int2d(Th,qforder=2)(dp*q)
        //+ int2d(Th)(dp*q)
     +on(1,2,4, uu1=0, uu2=0)
     +on(3, uu1=g2, uu2=0);

NS2;

real errorL4=0;
errorL4 = sqrt(sqrt(int2d(Th2)((u1-uu1)^4+(u2-uu2)^4)));

cout << endl;
cout << "Resultados:" << endl;
cout << "--------------------------" << endl;
cout << "errorL4: " << errorL4 << endl;
cout << "h_max: " << h2 << endl;

cout << endl;
cout << "NbBoundaryElements:\t" <<  Th2.nbe << endl;
cout << "NbTriangles:\t\t" <<  Th2.nt << endl;
cout << "NbVertices:\t\t" <<  Th2.nv << endl;

/////////////////////////////////////////////////////////////
//Save mesh
//savemesh(Th,"mesh_square.msh");
//Save finite element space connectivity
//ffSaveVh(Th,Vh,"espacio_Vh.txt");
//ffSaveVh(Th,Qh,"espacio_Qh.txt");
//Save some scalar data
//ffSaveData(dp,"presion.txt");
//Save a 2D vector field
//ffSaveData2(u1,u2,"solucion.txt");

//plot(u1,value=1,ps="componente_1.eps",cmm="Componente u_1",wait=1);
//plot(u2,value=1,ps="componente_2.eps",cmm="Componente u_2",wait=1);
//plot([u1,u2],value=1,ps="velocidad.eps",wait=1);

