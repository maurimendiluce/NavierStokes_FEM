include "ffmatlib.idp"

//Parametros
int n = 24;
real h=1./n;
real nu = 1;
real tol = 1e-9;
real eps = 2*h;

//Malla
// Mesh
real x0 = -1;
real x1 = 1;
real y0 = -1;
real y1 = 1;
mesh Th = square(n, n, [x0+(x1-x0)*x, y0+(y1-y0)*y]);

func real sigma(real x){
  if(-1<=x && x<=-0.5){
    return 1;
  }
  if(-0.5<= x && x<=0.5){
    return 6*(0.5-x)^5-15*(0.5-x)^4+10*(0.5-x)^3;
  }
  if(0.5<=x && x<=1){
    return 0;
  }
}

func real geps(real x){
  return 1-sigma(x)*exp(-(1+x)/eps)-sigma(-x)*exp(-(1-x)/eps);
}


func real gh(real x){
    if(-1<=x && x<-1+h){
        return (x+1)/h;
    }
    if(-1+h<=x && x<=1-h){
        return 1;
    }
    if(1-h<x && x<=1){
        return (1-x)/h;
    }
}

//Fespace
fespace Vh(Th,P2);
Vh u1o, u2o, v1, v2, u1, u2, du1, du2;


fespace Qh(Th, P1);
Qh p, q, dp, psi,phi;
Qh g=gh(x);

fespace Ph(Th, P0);
Ph hh = hTriangle; //get the size of all triangles

real hmax=hh[].max;

//Macro
macro a(u1,u2,v1,v2) (dx(u1)*dx(v1) + dy(u1)*dy(v1) + dx(u2)*dx(v2) + dy(u2)*dy(v2)) //
macro Gradient(u) [dx(u),dy(u)] //
macro div(u1,u2) (dx(u1) + dy(u2)) //
macro UgradV(u1,u2,v1,v2) [ [u1,u2]'*[dx(v1),dy(v1)] , [u1,u2]'*[dx(v2),dy(v2)] ]//

real meanp, meandp;

macro NS() {
 int k;
 real err=0;
 Stokes;
 meanp = int2d(Th)(p) / Th.area;
 p = p - meanp;
/* Newton Loop  */
 for(k=0; k< 15; k++) {
   LinNS;
   meandp = int2d(Th)(dp) / Th.area;
   dp = dp - meandp;
   du1[] = u1[] - u1o[];
   du2[] = u2[] - u2o[];
   err = sqrt(int2d(Th)(Gradient(du1)'*Gradient(du1)+Gradient(du2)'*Gradient(du2))) /
     sqrt(int2d(Th)(Gradient(u1o)'*Gradient(u1o) + Gradient(u2o)'*Gradient(u2o)));
   u1o[] = u1[];
   u2o[] = u2[];
   cout << "error = " << err << " / " << "tol = " << tol << endl;
   cout.flush;
   if(err < tol) break;
 }
 /* Newton loop has not converged */
 if(err > tol) {
   cout << "NS Warning : non convergence : err = " << err << " / eps = " << tol << endl;
 }

} //

//Problemas 
problem Stokes ([u1o, u2o, p],[v1, v2, q])
    = int2d(Th)(
        nu*a(u1o,u2o,v1,v2)
        - div(v1,v2)*p
        + q*(div(u1o,u2o)))//-int2d(Th,qforder=2)(p*q)
        //+ int2d(Th)(p*q) 
     +on(1,2,4, u1o=0, u2o=0)
     +on(3, u1o=1, u2o=0);

problem LinNS([u1,u2,dp],[v1,v2,q]) = 
     int2d(Th)(nu*a(u1,u2,v1,v2)
	       + UgradV(u1,u2, u1o, u2o)'*[v1,v2]
	       + UgradV(u1o,u2o,u1,u2)'*[v1,v2]
	       + div(u1,u2)*q - div(v1,v2)*dp)
        -int2d(Th)(UgradV(u1o,u2o, u1o, u2o)'*[v1,v2])//-int2d(Th,qforder=2)(dp*q)
        //+ int2d(Th)(dp*q)
     +on(1,2,4, u1=0, u2=0)
     +on(3, u1=1, u2=0);

NS;


//Save mesh
savemesh(Th,"mesh_square.msh");
//Save finite element space connectivity
ffSaveVh(Th,Vh,"espacio_Vh.txt");
ffSaveVh(Th,Qh,"espacio_Qh.txt");
//Save some scalar data
ffSaveData(dp,"presion.txt");
//Save a 2D vector field
ffSaveData2(u1,u2,"solucion.txt");

//plot(dp);

//plot(u1,value=1,ps="componente_1.eps",cmm="Componente u_1",wait=1);
//plot(u2,value=1,ps="componente_2.eps",cmm="Componente u_2",wait=1);
plot([u1,u2],value=1,ps="velocidad.eps",cmm="Solucion u_h",wait=1);






