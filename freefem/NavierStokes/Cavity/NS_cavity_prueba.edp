//    Steady Navier-Stokes problem in a cavity.
//
//      - uxx - uyy + u ux + v uy + px = uf
//      - vxx - vyy + u vx + v vy + py = vf
//        ux  + vy                     = pf
//
//      u = 1 along top wall.
//
include "ffmatlib.idp"
cout << "\n";
cout << "driven_cavity_stokes:\n";
cout << "  FreeFem++ version.\n";
cout << "  Solve for steady Navier Stokes flow in a cavity.\n";
//
//  eps: the penalty coefficient for the continuity equation.
//
real eps = 1.0E-10;
real tol = 1.0E-8;
real nu = 0.1;
//
//  n: the number of nodes in each spatial direction.
//
int n = 30;
//
//  Th: the triangulation of the square.
//
mesh Th = square ( n, n );
//
//  Vh: the finite element space for 2D velocity vector (piecewise linear "bubble") 
//
fespace Vh ( Th, P2 );
// 
//  Qh: the finite element space for the scalar pressure (piecewise linear).
//
fespace Qh ( Th, P1 );
//
//  u1, u1o, u2, u2o: velocity trial functions.
//
Vh u1, u1o, u2, u2o;
//
//  p: pressure trial functions.
//
Qh p;
//
//  v1, v2: velocity test functions.
//
Vh v1, v2;
//
//  q: pressure test functions.
//
Qh q;
//
//  Define the problem.
//
problem navierstokes ( [u1,u2,p], [v1,v2,q] ) 
  = int2d ( Th, qforder = 3 ) 
  ( 
    nu*dx(u1)      * dx(v1) 
  + nu*dy(u1)      * dy(v1)
  + dx(p)       *    v1
  + u1*dx(u1o)  *    v1
  + u2*dy(u1o)  *    v1
  + u1o*dx(u1)  *    v1
  + u2o*dy(u1)  *    v1
  + nu*dx(u2)      * dx(v2) 
  + nu*dy(u2)      * dy(v2)
  + dy(p)       *    v2
  + u1*dx(u2o)  *    v2
  + u2*dy(u2o)  *    v2
  + u1o*dx(u2)  *    v2
  + u2o*dy(u2)  *    v2
  + dx(u1)      *    q
  + dy(u2)      *    q
  //- eps * p     *    q
  ) 
  - int2d ( Th, qforder = 3 )
  (
    u1o*dx(u1o) *    v1
  + u2o*dy(u1o) *    v1
  + u1o*dx(u2o) *    v2
  + u2o*dy(u2o) *    v2
  )
  + on ( 1, 2,    4, u1 = 0.0 )
  + on (       3,    u1 = 1.0 )
  + on ( 1, 2, 3, 4, u2 = 0.0 );
//
//  Initialize u1 and u2.
//
  u1 = 0.0;
  u2 = 0.0;
//
//  Seek a solution [u1,u2,p] of the nonlinear equations via a fixed point iteration.
//
real err = 0;
  for ( int i = 0; i < 10; i++ )
  {
    u1o = u1;
    u2o = u2;
    navierstokes;
    err = sqrt(int2d(Th)(square(dx(u1)-dx(u1o))+square(dx(u2)-dx(u2o))));
    cout << "Iteracion: " << i << " - Error: " << err << endl;
    if(err < tol) break;
  }
//
//  Plot the velocity vectors, using 1 color for the vectors.
//
plot ( [ u1, u2 ], wait=1 );
//
//  Plot the pressure.
//

real[int] colorhsv=[ // color hsv model
   4./6., 1 , 0.5, // dark blue
   4./6., 1 , 1, // blue
   5./6., 1 , 1, // magenta
   1, 1. , 1, // red
   1, 0.5 , 1 // light red
   ];

plot ( p , value=true, fill=true, wait=1, hsv=colorhsv);

plot(u1,wait=1);

plot(u2,wait=1);

//Save mesh
savemesh(Th,"mesh_square.msh");
//Save finite element space connectivity
ffSaveVh(Th,Vh,"espacio_Vh.txt");
//Save some scalar data
ffSaveData(p,"presion.txt");
//Save a 2D vector field
ffSaveData(u1,"velocidad1.txt");
ffSaveData(u2,"velocidad2.txt");

//
//  Terminate.
//
cout << "\n";
cout << "driven_cavity_navier_stokes:\n";
cout << "  Normal end of execution.\n";

exit ( 0 );